#
# Author:           Jacob B. Madsen
# Email:            jacob@jbmadsen.com
# Date:             2019-05-11
# Computation time: 0.6286206245422363 seconds 
#

# Description:
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
# are all figurate (polygonal) numbers and are generated by the following formulae:
# Triangle 	  	P_(3,n) = n(n+1)/2 	  	1, 3, 6, 10, 15, ...
# Square 	  	P_(4,n) = n^2 	  	    1, 4, 9, 16, 25, ...
# Pentagonal 	P_(5,n) = n(3nâˆ’1)/2 	1, 5, 12, 22, 35, ...
# Hexagonal 	P_(6,n) = n(2nâˆ’1) 	  	1, 6, 15, 28, 45, ...
# Heptagonal 	P_(7,n) = n(5nâˆ’3)/2 	1, 7, 18, 34, 55, ...
# Octagonal 	P_(8,n) = n(3nâˆ’2) 	  	1, 8, 21, 40, 65, ...
#
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
#
#    The set is cyclic, in that the last two digits of each number is the first 
#    two digits of the next number (including the last number with the first).
#    Each polygonal type: triangle (P_(3,127)=8128), square (P_(4,91)=8281),
#    and pentagonal (P_(5,44)=2882), is represented by a different number in the set.
#    This is the only set of 4-digit numbers with this property.
#
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type:
# triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.


# Imports
import itertools

# Imports time and start counting
import time
start = time.time()
print ("Starting...")

# Intuition (trim and brute force rest)
# Generate set of all 4 digit numbers for each category
# Trim each set based on first/last digits in all other sets
# Generate a list of all permutations of the lists
# Loop through first permutation, and for first list, for each element find a 4 digit square that matches
# then find a match in the next, and continue until all are found
# or skip a step back if none is found and try next in line
# or jump to next permutation if none is found

def triangle(n: int): return n * (n + 1) // 2
def square(n: int): return n ** 2
def pentagonal(n: int): return n * (3 * n - 1) // 2
def hexagonal(n: int): return n * (2 * n - 1)
def heptagonal(n: int): return n * (5 * n - 3) // 2
def octagonal(n: int): return n * (3 * n - 2)

def trim(lst: list): return [x for x in lst if x >= 1000 and x <= 9999]

def get_last(n): return int(str(n)[-2:])
def get_first(n): return int(str(n)[:2])

def exclude(full_list: list, exclude_list: list): return [x for x in full_list if x not in exclude_list]

def candidates(full_list: list, lst: list): return [x for x in lst if get_last(x) in map(get_first, exclude(full_list, lst))]

# Create all possible 4 letter combinations 
triangles = trim([triangle(i) for i in range(40, 150)])
squares = trim([square(i) for i in range(30, 100)])
pentagonals = trim([pentagonal(i) for i in range(20, 90)])
hexagonals = trim([hexagonal(i) for i in range(20, 80)])
heptagonals = trim([heptagonal(i) for i in range(20, 70)])
octagonals = trim([octagonal(i) for i in range(10, 60)])

combined = list(itertools.chain(triangles, squares, pentagonals, hexagonals, heptagonals, octagonals))

triangles = candidates(combined, triangles)
squares = candidates(combined, squares)
pentagonals = candidates(combined, pentagonals)
hexagonals = candidates(combined, hexagonals)
heptagonals = candidates(combined, heptagonals)
octagonals = candidates(combined, octagonals)

if True:
    print(len(triangles))
    print(len(squares))
    print(len(pentagonals))
    print(len(hexagonals))
    print(len(heptagonals))
    print(len(octagonals))

def compute_by_order(list_a, list_b, list_c, list_d, list_e, list_f, debug: bool = False):
    for a in list_a:
        al = get_last(a)
        for b in list_b:
            bf = get_first(b)
            if al != bf:
                continue
            bl = get_last(b)
            for c in list_c:
                cf = get_first(c)
                if bl != cf:
                    continue
                if debug: print(a, b, c)
                cl = get_last(c)
                for d in list_d:
                    df = get_first(d)
                    if cl != df:
                        continue
                    if debug: print(a, b, c, d)
                    dl = get_last(d)
                    for e in list_e:
                        ef = get_first(e)
                        if ef != dl:
                            continue
                        if debug: print(a, b, c, d, e)
                        el = get_last(e)
                        for f in list_f:
                            ff = get_first(f)
                            if el != ff:
                                continue
                            if debug: print(a, b, c, d, e, f)
                            fl = get_last(f)
                            af = get_first(a)
                            if fl == af:
                                print("Success")
                                print("Solution:",a,b,c,d,e,f)
                                print("Sum:", a+b+c+d+e+f)
                                return True
    if debug: print("No solution...")
    return False

for i in itertools.permutations([triangles, squares, pentagonals, hexagonals, heptagonals, octagonals]):
    solution = compute_by_order(i[0], i[1], i[2], i[3], i[4], i[5])
    if solution:
        break

# Prints the time to complete
print ("Done in " + str(time.time()-start) + " seconds.")
