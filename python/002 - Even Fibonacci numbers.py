#
# Author:           Jacob B. Madsen
# Email:            jacob@jbmadsen.com
# Date:             2009-07-23
# Computation time: 0.0 seconds.
#

# Description:
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#                       1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
# Find the sum of all the even-valued terms in the sequence which do not exceed four million.

# Imports time and start counting
import time
start = time.time()
print("Starting...")

# The number we are looking below
number = 4000000

# The sum of all the numbers added together
final_sum = 2

# The list of the found numbers
fibonacci = [1,2]

# The temporary variable
temp = 0

# While the sum is below number
while final_sum < number:
    len_list = len(fibonacci)
    temp = fibonacci[len_list - 1] + fibonacci[len_list - 2]
    fibonacci.append(temp)
    if temp % 2 == 0:
        final_sum += temp

# Prints the final sum
print(final_sum)

# Prints the time to complete
print("Done in " + str(time.time()-start) + " seconds.")
